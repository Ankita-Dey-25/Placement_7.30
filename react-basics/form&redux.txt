Handling forms in React is a common task, and using TypeScript can make it even more robust by providing type safety. I'll cover basic form handling, form validation, and advanced form handling with libraries like Formik and React Hook Form.

In controlled components,  we control state by useState, inputs by onChange


1. Basic Form Handling
First, let's look at a simple example of handling form state and submission in React using TypeScript.


import React, { useState, ChangeEvent, FormEvent } from 'react';

type FormData = {
  name: string;
  age: number;
};

const BasicForm: React.FC = () => {
  const [formData, setFormData] = useState<FormData>({ name: '', age: 0 });

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: name === 'age' ? Number(value) : value,
    }));
  };

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    console.log('Form data:', formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="name">Name: </label>
        <input
          type="text"
          id="name"
          name="name"
          value={formData.name}
          onChange={handleChange}
        />
      </div>
      <div>
        <label htmlFor="age">Age: </label>
        <input
          type="number"
          id="age"
          name="age"
          value={formData.age}
          onChange={handleChange}
        />
      </div>
      <button type="submit">Submit</button>
    </form>
  );
};

export default BasicForm;
2. Form Validation
Next, let's enhance the form by adding some validation.


import React, { useState, ChangeEvent, FormEvent } from 'react';

type FormData = {
  name: string;
  age: number;
};
/* formik, react hook forms -- yup,zod*/
const FormWithValidation: React.FC = () => {
  const [formData, setFormData] = useState<FormData>({ name: '', age: 0 });
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: name === 'age' ? Number(value) : value,
    }));
  };

  const validate = (): boolean => {
    const errors: { [key: string]: string } = {};
    if (!formData.name) errors.name = 'Name is required';
    if (formData.age <= 0) errors.age = 'Age must be greater than 0';
    setErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (validate()) {
      console.log('Form data:', formData);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="name">Name: </label>
        <input
          type="text"
          id="name"
          name="name"
          value={formData.name}
          onChange={handleChange}
        />
        {errors.name && <span>{errors.name}</span>}
      </div>
      <div>
        <label htmlFor="age">Age: </label>
        <input
          type="number"
          id="age"
          name="age"
          value={formData.age}
          onChange={handleChange}
        />
        {errors.age && <span>{errors.age}</span>}
      </div>
      <button type="submit">Submit</button>
    </form>
  );
};

export default FormWithValidation;
3. Using Formik for Advanced Form Handling
Formik is a popular library for managing forms in React. It provides a higher-level API to manage form state, validation, and submission.


import React from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';

type FormData = {
  name: string;
  age: number;
};

const validationSchema = Yup.object({
  name: Yup.string().required('Name is required'),
  age: Yup.number().min(1, 'Age must be greater than 0').required('Age is required'),
});

const FormikForm: React.FC = () => {
  const initialValues: FormData = { name: '', age: 0 };

  const handleSubmit = (values: FormData) => {
    console.log('Form data:', values);
  };

  return (
    <Formik
      initialValues={initialValues}
      validationSchema={validationSchema}
      onSubmit={handleSubmit}
    >
      {() => (
        <Form>
          <div>
            <label htmlFor="name">Name: </label>
            <Field id="name" name="name" type="text" />
            <ErrorMessage name="name" component="div" />
          </div>
          <div>
            <label htmlFor="age">Age: </label>
            <Field id="age" name="age" type="number" />
            <ErrorMessage name="age" component="div" />
          </div>
          <button type="submit">Submit</button>
        </Form>
      )}
    </Formik>
  );
};

export default FormikForm;
import React from 'react';
import { useForm } from 'react-hook-form';

export default function App() {
  const { register, handleSubmit, formState: { errors } } = useForm();
  const onSubmit = data => console.log(data);
  console.log(errors);
  
  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input type="text" placeholder="First name" {...register("First name", {required: true, maxLength: 80})} />
      <input type="text" placeholder="Last name" {...register("Last name", {required: true, maxLength: 100})} />
      <input type="text" placeholder="Email" {...register("Email", {required: true, pattern: /^\S+@\S+$/i})} />
      <input type="tel" placeholder="Mobile number" {...register("Mobile number", {required: true, minLength: 6, maxLength: 12})} />

      <input {...register("Developer", { required: true })} type="radio" value="Yes" />
      <input {...register("Developer", { required: true })} type="radio" value="No" />

      <input type="submit" />
    </form>
  );
}
4. Using React Hook Form for Advanced Form Handling
React Hook Form is another powerful library for handling forms in React. It makes use of React hooks and provides a simple API for form handling.


import React from 'react';
import { useForm, SubmitHandler } from 'react-hook-form';

type FormData = {
  name: string;
  age: number;
};

const HookForm: React.FC = () => {
  const { register, handleSubmit, formState: { errors } } = useForm<FormData>();

  const onSubmit: SubmitHandler<FormData> = (data) => {
    console.log('Form data:', data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <div>
        <label htmlFor="name">Name: </label>
        <input id="name" {...register('name', { required: 'Name is required' })} />
        {errors.name && <span>{errors.name.message}</span>}
      </div>
      <div>
        <label htmlFor="age">Age: </label>
        <input id="age" type="number" {...register('age', { required: 'Age is required', min: { value: 1, message: 'Age must be greater than 0' } })} />
        {errors.age && <span>{errors.age.message}</span>}
      </div>
      <button type="submit">Submit</button>
    </form>
  );
};

export default HookForm;
Summary
Basic Form Handling: Manages form state and submission.
Form Validation: Adds validation logic to the form.
Formik: Provides a high-level API for form management, including validation.
React Hook Form: Uses hooks for form management and validation, providing a simple and performant solution.
Each approach has its own benefits, and choosing the right one depends on the complexity of your form and your specific requirements.


 Let's dive into using Zod for form validation, as well as the concepts of controlled and uncontrolled components in React.

1. Using Zod for Form Validation
Zod is a TypeScript-first schema declaration and validation library. It's very useful for validating form data in a type-safe way. Here's how you can use Zod to validate form data in a React component.

Installation
First, you need to install Zod:


npm install zod
Example
Here's an example of using Zod to validate form data:


import React, { useState, ChangeEvent, FormEvent } from 'react';
import { z, ZodError } from 'zod';

const schema = z.object({
  name: z.string().min(1, 'Name is required'),
  age: z.number().positive('Age must be greater than 0'),
});

type FormData = z.infer<typeof schema>;

const ZodForm: React.FC = () => {
  const [formData, setFormData] = useState<FormData>({ name: '', age: 0 });
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: name === 'age' ? Number(value) : value,
    }));
  };

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    try {
      schema.parse(formData);
      console.log('Form data:', formData);
      setErrors({});
    } catch (err) {
      if (err instanceof ZodError) {
        const newErrors: { [key: string]: string } = {};
        err.errors.forEach((error) => {
          newErrors[error.path[0]] = error.message;
        });
        setErrors(newErrors);
      }
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="name">Name: </label>
        <input
          type="text"
          id="name"
          name="name"
          value={formData.name}
          onChange={handleChange}
        />
        {errors.name && <span>{errors.name}</span>}
      </div>
      <div>
        <label htmlFor="age">Age: </label>
        <input
          type="number"
          id="age"
          name="age"
          value={formData.age}
          onChange={handleChange}
        />
        {errors.age && <span>{errors.age}</span>}
      </div>
      <button type="submit">Submit</button>
    </form>
  );
};

export default ZodForm;
2. Controlled Components
In a controlled component, the form data is handled by the React component's state. The React component controls the form inputs' values.

Example
Here's an example of a controlled component:


import React, { useState, ChangeEvent, FormEvent } from 'react';

const ControlledForm: React.FC = () => {
  const [value, setValue] = useState<string>('');

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    setValue(e.target.value);
  };

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    console.log('Submitted value:', value);
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Controlled:
        <input type="text" value={value} onChange={handleChange} />
      </label>
      <button type="submit">Submit</button>
    </form>
  );
};

export default ControlledForm;
3. Uncontrolled Components
In an uncontrolled component, the form data is handled by the DOM itself. React refs are used to access the form values.

Example
Here's an example of an uncontrolled component:


import React, { useRef, FormEvent } from 'react';

const UncontrolledForm: React.FC = () => {
  const inputRef = useRef<HTMLInputElement>(null);

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (inputRef.current) {
      console.log('Submitted value:', inputRef.current.value);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Uncontrolled:
        <input type="text" ref={inputRef} />
      </label>
      <button type="submit">Submit</button>
    </form>
  );
};

export default UncontrolledForm;
Summary
Zod for Form Validation: Zod can be used to define a schema and validate form data in a type-safe manner.
Controlled Components: Form data is managed by React state, with input values controlled by state.
Uncontrolled Components: Form data is managed by the DOM, with input values accessed via React refs.
Using these approaches, you can handle form data and validation effectively in your React applications.

Let's dive into Redux and Redux Toolkit with TypeScript examples.

1. Redux Basics
Redux is a state management library for JavaScript applications, commonly used with React. It helps manage and centralize application state, making it predictable and easier to debug.

2. Setting Up Redux with TypeScript
Installation
First, install the necessary packages:


npm install redux react-redux @reduxjs/toolkit @types/react-redux
3. Redux Toolkit
Redux Toolkit is the official, recommended way to write Redux logic. It provides a set of tools to make Redux easier to use, including functions to simplify reducer creation, action creation, and store setup.

4. Creating a Redux Store
Store Configuration

// src/store.ts
import { configureStore } from '@reduxjs/toolkit';
import counterReducer from './counterSlice';

export const store = configureStore({
  reducer: {
    counter: counterReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
5. Creating a Slice
A slice in Redux Toolkit is a collection of reducer logic and actions for a single feature of the application.


// src/counterSlice.ts
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface CounterState {
  value: number;
}

const initialState: CounterState = {
  value: 0,
};

const counterSlice = createSlice({
  name: 'counter',
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;

export default counterSlice.reducer;
6. Connecting Redux to React Components
Provider Setup
Wrap your React application with the Redux Provider component.


// src/index.tsx
import React from 'react';
import ReactDOM from 'react-dom';
import { Provider } from 'react-redux';
import { store } from './store';
import App from './App';

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);
Using Redux State and Dispatch in Components
Use the useSelector and useDispatch hooks from react-redux to interact with the Redux store.


// src/App.tsx
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from './store';
import { increment, decrement, incrementByAmount } from './counterSlice';

const App: React.FC = () => {
  const count = useSelector((state: RootState) => state.counter.value);
  const dispatch = useDispatch();

  return (
    <div>
      <h1>Count: {count}</h1>
      <button onClick={() => dispatch(increment())}>Increment</button>
      <button onClick={() => dispatch(decrement())}>Decrement</button>
      <button onClick={() => dispatch(incrementByAmount(5))}>Increment by 5</button>
    </div>
  );
};

export default App;
Summary
Redux Basics: Centralizes application state, making it predictable and easier to debug.
Setup: Install necessary packages.
Redux Toolkit: Simplifies Redux logic with tools for creating reducers, actions, and configuring the store.
Store Configuration: Create a store with configureStore.
Creating a Slice: Define state, actions, and reducers in a slice.
Connecting to React: Use Provider to wrap the app, and useSelector and useDispatch hooks to interact with the store in components.